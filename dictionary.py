from unittest import skip
import requests

with open('secrets/merriamwebster', 'r') as client_file:
    key = client_file.read().strip()

ipa_to_note: dict[str, str] = {
    "e": "â¬‡",
    "Ã¦": "ðŸŸ¢â¬‡",
    "ÊŒ": "ðŸ”´â¬‡",
    "ÊŠ": "ðŸŸ¡â¬‡",
    "É’": "ðŸ”µâ¬‡",
    "É™": "ðŸŸ â¬‡",
    "i": "ðŸŸ¢ðŸ”´â¬‡",
    "Éœ": "ðŸŸ¢ðŸŸ¡â¬‡",
    "É”": "ðŸŸ¢ðŸ”µâ¬‡",
    "u": "ðŸŸ¢ðŸŸ â¬‡",
    "É‘": "ðŸ”´ðŸŸ¡â¬‡",
    "Éª": "ðŸŸ¢ðŸ”´ðŸŸ¡ðŸ”µâ¬‡",
    "É›": "ðŸŸ¢ðŸ”´ðŸŸ¡ðŸ”µâ¬†",
    "oÊŠ": "ðŸ”´ðŸŸ¡ðŸ”µðŸŸ â¬‡",
    "ÉªÉ™": "ðŸ”´ðŸ”µâ¬‡",
    "eÉ™": "ðŸ”´ðŸŸ â¬‡",
    "eÉª": "ðŸŸ¡ðŸ”µâ¬‡",
    "É”Éª": "ðŸŸ¡ðŸŸ â¬‡",
    "aÉª": "ðŸ”µðŸŸ â¬‡",
    "É™ÊŠ": "ðŸŸ¢ðŸ”´ðŸŸ¡â¬‡",
    "aÊŠ": "ðŸŸ¢ðŸ”´ðŸ”µâ¬‡",
    "f": "ðŸŸ¢ðŸŸ¡ðŸ”µâ¬‡",
    "v": "ðŸ”´ðŸŸ¡ðŸ”µâ¬‡",
    "Î¸": "ðŸ”´ðŸŸ¡ðŸŸ â¬‡",
    "Ã°": "ðŸ”´ðŸ”µðŸŸ â¬‡",
    "z": "ðŸŸ¡ðŸ”µðŸŸ â¬‡",
    "Êƒ": "â¬†",
    "Ê’": "ðŸŸ¢â¬†",
    "h": "ðŸ”´â¬†",
    "p": "ðŸŸ¡â¬†",
    "b": "ðŸ”µâ¬†",
    "t": "ðŸŸ â¬†",
    "d": "ðŸŸ¢ðŸ”´â¬†",
    "k": "ðŸŸ¢ðŸŸ¡â¬†",
    "g": "ðŸŸ¢ðŸ”µâ¬†",
    "ÊˆÊƒ": "ðŸŸ¢ðŸŸ â¬†",
    "dÊ’": "ðŸ”´ðŸŸ¡â¬†",
    "r": "ðŸ”´ðŸ”µâ¬†",
    "j": "ðŸ”´ðŸŸ â¬†",
    "w": "ðŸŸ¡ðŸ”µâ¬†",
    "l": "ðŸŸ¡ðŸŸ â¬†",
    "s": "ðŸ”µðŸŸ â¬†",
    "m": "ðŸŸ¢ðŸ”´ðŸŸ¡â¬†",
    "n": "ðŸŸ¢ðŸ”´ðŸ”µâ¬†",
    "ng": "ðŸŸ¢ðŸŸ¡ðŸ”µâ¬†",
}

def make_chart_for_ipa(pronounciation:str) -> str:
    output = ""
    skip_next = False
    for i, char in enumerate(pronounciation):
        if skip_next:
            skip_next = False
            continue
        if i < len(pronounciation) - 1:
            pair = char + pronounciation[i]
            if pair in ipa_to_note:
                output += ipa_to_note[pair]
                skip_next = True
                continue
        if char in ipa_to_note:
            output += ipa_to_note[char]
    return output

def run():
    while True:
        print("Input a single word to get the chart for it")
        word = input()
        dictionary_response = requests.get(f"https://www.dictionaryapi.com/api/v3/references/learners/json/{word}?key={key}").json()
        ipas = []
        for definition in dictionary_response:
            hwi = definition["hwi"]
            for pronounciations in (hwi.get("prs", []) + hwi.get("altprs", [])):
                if "ipa" in pronounciations:
                    ipas.append(pronounciations["ipa"])
        ipas = set(ipas)
        for ipa in ipas:
            print(f"{ipa} - {make_chart_for_ipa(ipa)}")
    

if __name__ == "__main__":
    run()